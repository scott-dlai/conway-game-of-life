{"version":3,"sources":["Board.tsx","ParameterForm.tsx","Game.tsx","App.tsx","index.tsx"],"names":["CellType","between","n","l","u","directions","randomCell","Math","random","ALIVE","EMPTY","Board","rows","cols","speed","useState","Array","fill","grid","setGrid","useEffect","simulating","setSimulating","toggleCell","r","c","map","row","i","cell","j","inGrid","getNeighborsOf","neighbors","dr","dc","push","tick","alives","newGrid","newRow","liveCount","filter","neighbor","length","sameGrid","simulation","setInterval","clearInterval","style","display","justifyContent","marginBottom","Button","onClick","disabled","variant","gridTemplateColumns","col","width","height","backgroundColor","border","ParameterForm","onSubmit","defaultRows","defaultCols","defaultSpeed","setRows","setCols","setSpeed","Form","Label","Control","type","value","placeholder","id","min","max","onChange","target","Number","step","alignItems","block","Game","s","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5360e2e6.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Button } from 'react-bootstrap';\n\ninterface BoardProps {\n  rows: number;\n  cols: number;\n  speed: number;\n}\n\nenum CellType {\n  EMPTY,\n  ALIVE,\n}\n\nconst oppositeState = (t: CellType): CellType => {\n  return t === CellType.EMPTY ? CellType.ALIVE : CellType.EMPTY;\n};\n\nconst between = (n: number, l: number, u: number) => l <= n && n < u;\n\nconst directions = [\n  [-1, -1],\n  [-1, 0],\n  [-1, 1],\n  [0, -1],\n  [0, 1],\n  [1, -1],\n  [1, 0],\n  [1, 1],\n];\n\nconst ALIVE_RATE = 0.35;\n\nconst randomCell = () =>\n  Math.random() < ALIVE_RATE ? CellType.ALIVE : CellType.EMPTY;\n\nconst Board = ({ rows, cols, speed }: BoardProps) => {\n  const [grid, setGrid] = useState<CellType[][]>(\n    Array(rows).fill(Array(cols).fill(CellType.EMPTY))\n  );\n\n  useEffect(() => {\n    setGrid(Array(rows).fill(Array(cols).fill(CellType.EMPTY)));\n  }, [rows, cols, speed]);\n\n  const [simulating, setSimulating] = useState(false);\n\n  const toggleCell = (r: number, c: number) =>\n    setGrid(\n      grid.map((row, i) =>\n        row.map((cell, j) => (i === r && j === c ? oppositeState(cell) : cell))\n      )\n    );\n\n  const inGrid = (r: number, c: number) =>\n    between(r, 0, rows) && between(c, 0, cols);\n\n  const rules = (cell: CellType, alives: number) => {\n    if (cell === CellType.ALIVE && (alives === 2 || alives === 3)) {\n      return CellType.ALIVE;\n    } else if (cell === CellType.EMPTY && alives === 3) {\n      return CellType.ALIVE;\n    } else {\n      return CellType.EMPTY;\n    }\n  };\n\n  const getNeighborsOf = (r: number, c: number) => {\n    const neighbors: CellType[] = [];\n\n    for (const [dr, dc] of directions) {\n      if (inGrid(r + dr, c + dc)) {\n        neighbors.push(grid[r + dr][c + dc]);\n      }\n    }\n    return neighbors;\n  };\n\n  const sameGrid = (newGrid: CellType[][]) => {\n    for (let r = 0; r < rows; ++r) {\n      for (let c = 0; c < cols; ++c) {\n        if (grid[r][c] !== newGrid[r][c]) {\n          return false;\n        }\n      }\n    }\n    return true;\n  };\n\n  const tick = () => {\n    const newGrid: CellType[][] = [];\n    for (let r = 0; r < rows; ++r) {\n      const newRow: CellType[] = [];\n      for (let c = 0; c < cols; ++c) {\n        const neighbors = getNeighborsOf(r, c);\n        const liveCount = neighbors.filter(\n          (neighbor) => neighbor === CellType.ALIVE\n        ).length;\n\n        newRow.push(rules(grid[r][c], liveCount));\n      }\n      newGrid.push(newRow);\n    }\n    // Compare to previous tick\n    // If they are the same then stop the simulation\n    if (sameGrid(newGrid)) {\n      setSimulating(false);\n    }\n    setGrid(newGrid);\n  };\n\n  const clearGrid = () =>\n    setGrid(grid.map((row) => row.map(() => CellType.EMPTY)));\n\n  const randomize = () => setGrid(grid.map((row) => row.map(randomCell)));\n\n  useEffect(() => {\n    let simulation: NodeJS.Timeout;\n\n    if (simulating) {\n      simulation = setInterval(() => tick(), speed);\n    }\n\n    return () => clearInterval(simulation);\n  }, [simulating, grid]);\n\n  return (\n    <>\n      <div\n        style={{\n          display: 'flex',\n          justifyContent: 'space-around',\n          marginBottom: '1em',\n        }}\n      >\n        <Button onClick={() => setSimulating(!simulating)}>\n          {simulating ? 'Stop' : 'Start'}\n        </Button>\n        <Button\n          disabled={simulating}\n          variant='danger'\n          onClick={() => clearGrid()}\n        >\n          Clear\n        </Button>\n        <Button\n          disabled={simulating}\n          variant='info'\n          onClick={() => randomize()}\n        >\n          Random\n        </Button>\n      </div>\n      <div\n        style={{\n          display: 'flex',\n          justifyContent: 'center',\n        }}\n      >\n        <div\n          style={{\n            display: 'grid',\n            gridTemplateColumns: `repeat(${cols}, 20px)`,\n          }}\n        >\n          {grid.map((row, r) =>\n            row.map((col: CellType, c: number) => (\n              <div\n                style={{\n                  width: 20,\n                  height: 20,\n                  backgroundColor: col === CellType.EMPTY ? 'white' : '#13669c',\n                  border: '1px solid black',\n                }}\n                key={`${r}, ${c}`}\n                onClick={() => {\n                  if (simulating) {\n                    return;\n                  }\n                  toggleCell(r, c);\n                }}\n              ></div>\n            ))\n          )}\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Board;\n","import React, { useState } from 'react';\nimport { Button, Form } from 'react-bootstrap';\n\ninterface FormProp {\n  onSubmit: (rows: number, cols: number, speed: number) => void;\n  defaultRows: number;\n  defaultCols: number;\n  defaultSpeed: number;\n}\nconst ParameterForm = ({\n  onSubmit,\n  defaultRows,\n  defaultCols,\n  defaultSpeed,\n}: FormProp) => {\n  const [rows, setRows] = useState<number>(defaultRows);\n  const [cols, setCols] = useState<number>(defaultCols);\n  const [speed, setSpeed] = useState<number>(defaultSpeed);\n\n  return (\n    <>\n      <div\n        style={{\n          display: 'flex',\n          justifyContent: 'space-around',\n          marginBottom: '1em',\n        }}\n      >\n        <div>\n          <Form.Label>Rows: {rows}</Form.Label>\n          <Form.Control\n            type='range'\n            value={rows}\n            placeholder='Number of rows'\n            id='rowsInput'\n            min={16}\n            max={48}\n            onChange={({ target: { value } }) => setRows(Number(value))}\n          />\n        </div>\n        <div>\n          <Form.Label>Columns: {cols}</Form.Label>\n          <Form.Control\n            type='range'\n            value={cols}\n            placeholder='Number of columns'\n            id='colsInput'\n            min={16}\n            max={48}\n            onChange={({ target: { value } }) => setCols(Number(value))}\n          />\n        </div>\n        <div>\n          <Form.Label>Speed per tick: {speed}</Form.Label>\n          <Form.Control\n            type='range'\n            value={speed}\n            placeholder='Speed per tick'\n            id='speedInput'\n            min={100}\n            max={1000}\n            step={100}\n            onChange={({ target: { value } }) => setSpeed(Number(value))}\n          />\n        </div>\n      </div>\n      <div\n        style={{\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n          marginBottom: '1em',\n        }}\n      >\n        <Button\n          variant='success'\n          block\n          onClick={() => onSubmit(rows, cols, speed)}\n        >\n          Create world\n        </Button>\n      </div>\n    </>\n  );\n};\n\nexport default ParameterForm;\n","import React, { useState } from 'react';\nimport Board from './Board';\nimport ParameterForm from './ParameterForm';\n\nconst DEFAULT_ROWS = 32;\n\nconst DEFAULT_COLS = 32;\n\nconst DEFAULT_SPEED = 100;\n\nconst Game = () => {\n  const [rows, setRows] = useState(DEFAULT_ROWS);\n  const [cols, setCols] = useState(DEFAULT_COLS);\n  const [speed, setSpeed] = useState(DEFAULT_SPEED);\n\n  const createWorld = (r: number, c: number, s: number) => {\n    setRows(r);\n    setCols(c);\n    setSpeed(s);\n  };\n\n  return (\n    <>\n      <h1>Game of Life</h1>\n      <ParameterForm\n        onSubmit={createWorld}\n        defaultRows={DEFAULT_ROWS}\n        defaultCols={DEFAULT_COLS}\n        defaultSpeed={DEFAULT_SPEED}\n      />\n      <Board rows={rows} cols={cols} speed={speed} />\n    </>\n  );\n};\n\nexport default Game;\n","import React from 'react';\nimport Game from './Game';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst App = () => {\n  return <Game />;\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}